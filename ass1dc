BPSK
clear
N = 10^6 % number of bits or symbols
rand('state',100); % initializing the rand() function
randn('state',200); % initializing the randn() function

% Transmitter
ip = rand(1,N)>0.5; % generating 0,1 with equal probability
s = 2*ip-1; % BPSK modulation 0 -> -1; 1 -> 1 
n = 1/sqrt(2)*[randn(1,N) + j*randn(1,N)]; % white gaussian noise, 0dB variance 
Eb_N0_dB = [-3:10]; % multiple Eb/N0 values

for ii = 1:length(Eb_N0_dB)
   % Noise addition
   y = s + 10^(-Eb_N0_dB(ii)/20)*n; % additive white gaussian noise

   % receiver - hard decision decoding
ipHat = real(y)>0;
% counting the errors
nErr(ii) = size(find([ip- ipHat]),2);
end
simBer = nErr/N; % simulated ber
theoryBer = 0.5*erfc(sqrt(10.^(Eb_N0_dB/10))); % theoretical ber
%theoryBer1=0.5*erfc(sqrt(0.5.*(10.^(Eb_NO_dB/10))));
% plot
close all
figure
semilogy(Eb_N0_dB,theoryBer,'b.-');
hold on
semilogy(Eb_N0_dB,simBer,'mx-');
axis([-3 10 10^-5 0.5])
grid on
 % counting the errors
   nErr(ii) = size(find([ip- ipHat]),2);
end
simBer = nErr/N; % simulated ber
theoryBer = 0.5*erfc(sqrt(10.^(Eb_N0_dB/10))); % theoretical ber
%theoryBer1=0.5*erfc(sqrt(0.5.*(10.^(Eb_NO_dB/10))));
% plot
close all
figure
semilogy(Eb_N0_dB,theoryBer,'b.-');
hold on
semilogy(Eb_N0_dB,simBer,'mx-');
axis([-3 10 10^-5 0.5])
grid on
legend('theory', 'simulation');
xlabel('Eb/No, dB');
ylabel('Bit Error Rate');
title('Bit error probability curve for BPSK modulation');


Random process

clc;
close all;
clear all;
echo on;
N=1000;
M=50;
Rx_av=zeros(1,M+1);
Sx_av=zeros(1,M+1);
for j=1:10
        X=rand(1,N)-1/2;
Rx=Rx_est(X,M);
Sx=fftshift(abs(fft(Rx)));
Rx_av=Rx_av+Rx;
Sx_av=Sx_av+Sx;
end
Rx_av=Rx_av/10;
Sx_av=Sx_av/10;
subplot(2,1,1);
plot(Rx_av);
xlabel('m');
axis([0 30 -0.01 0.1]);
subplot(2,1,2);
plot(Sx_av);
xlabel('f');
axis([0 30 0.06 0.12]);


RX_EST

function[Rx]=Rx_est(X,M)
%[Rx]=Rx-est(X<M)
%[Rx]=est:estimates the autocorrelation of the sequence of random variable
%given in X.only Rx(0),RX(1),.....
%Rx(M) are computed
%note that Rx(m)actually means Rx(m-1)
N=length(X);
Rx=zeros(1,M+1);
for m=1:M+1
    for n=1:N-m+1;
        Rx(m)=Rx(m)+X(n)*X(n+m-1);
    end
    Rx(m)=Rx(m)/(N-m+1);
end

CYCLIC

clc; 
clear all; 
close all; 
n=input('enter the value'); 
k=input('enter the value'); 
g=input('enter the generator matrix g(x)'); m=n-k; 
d=input('enter the message bits'); r0=0; 
r1=0; 
r2=0; 
for i=1:m+1 
 temp=xor(d(i),r2(i)); 
 r0(i+1)=temp; 
 r1(i+1)=r0(i); 
 r2(i+1)=xor(r1(i),temp); 
end 
a=[r0' r1' r2']; 
disp(a); 
disp('parity bits are:'); 
p=[r2(m+2) r1(m+2) r0(m+2)]; 
disp(p); 
c=[d p]; 
disp(c); 
r=input('enter the receive code'); s0=0; s1=0; s2=0; 
for i=2:n+1 
 xwt = s2(i-1); 
 s0(i)=xor(xwt,r(i-1));  
  
 if g(k-1)==0 
 s1(i)=s0(i-1); 
 else 
 s1(i)=xor(s0(i-1), xwt); 
 end 
  
 if g(k-2)==0 
 s2(i)=s1(i-1); 
 else 
 s2(i)=xor(s1(i-1), xwt); 
 end 
end 
s = [s2(n+1) s1(n+1) s0(n+1)]; 
display(s); 


Huffman 

clc; 
close all; 
clear all; 
s=input ('Enter the no of symbols '); 
x=input('Enter the symbols '); 
P=input('Enter the probabilities '); 
%encoder 
[dict,avglen] = huffmandict(x,P); 
enco = huffmanenco(x,dict); 
celldisp(dict); % Show rows of the dictionary. 
H=-sum(P.*log2(P)); % Entropy using inbuilt command n=H/avglen; % Effiency 
fprintf(1,'The average length is %f.\n',avglen); 
fprintf(1,'The entropy is %f.\n',H); 
fprintf(1,'The effiency is %f.\n',n); 
disp('encoded bits are:'); 
disp(enco); 
%decoder 
n=enco; 
deco = huffmandeco(n,dict); 
disp('decoded bits are:'); 
disp(deco);


%Program for coding and decoding of Linear block codes. 
clc; 
clear all; 
close all; 
n=input('Enter value of n='); 
k=input('Enter the value of k='); 
q=n-k; 
disp('q=n-k');q 
p=input('Accept parity matrix:-'); 
G=[eye(k) p]; 
disp('G=');G 
m=input('Enter possible msgs='); 
c=rem(m*G,2); 
for i=1:2^k 
 hw=0; 
 for j=1:n 
 if [c(i,j)==1] 
 hw=hw+1; 
 end 
end 
c(i,n+1)=hw; 
a(i,1)=hw; 
end 
disp('CODEWORD HW');c 
b=sort(a); 
%disp(b); 
dmin=b(2,1); 
disp('dmin=');dmin 
td=dmin-1; 
disp('td=');td 
tc=(dmin-1)/2; 
disp('tc=');tc 
%DECODING:- 
h=[p' eye(n-k)]; 
ht=h'; 
disp('h=');h 
disp('ht=');ht 
E=eye(n); 
disp('E'); 
r=input('Enter the received codeword'); 
S=rem(r*ht,2); 
disp('S');S 
if(S==0) 
 disp('no error'); 
 disp('correct codeword:-');r 
else 
 for i=1:1:size(ht) 
 if [ht(i,1:3)==S] 
 r(i)=1-r(i); 
 break;
 end  
 end 
 disp('position of error:-');(n-i+1)  disp('correct codeword:-');r 
end 












